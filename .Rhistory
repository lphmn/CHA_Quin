filtered_data <- f_pHDAPImmunization |>
dplyr::filter(vaccine == "Seven vaccine series") |>
dplyr::group_by(location, fips) |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nVaccine Percentage: "
, toolTipTextValue3 = scales::label_percent(accuracy= 0.01)(percent)
) |>
dplyr::ungroup()
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year >= maxYr-1)  |>
dplyr::arrange(fips, year) |>
dplyr::mutate(placeholder = scales::label_percent(accuracy= 0.01)(percent)) |>  #I wanted to use formattable but DT strips format when converted to HTML Table
dplyr::group_by(fips) |>
dplyr::mutate(percentageChange = dplyr::case_when(
year == maxYr ~ scales::label_percent(accuracy= 0.01)((percent) - dplyr::first(percent)) #Since there is only 2, most recent - next
, TRUE ~ ""
)
, percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
) |>
dplyr::ungroup() |>
dplyr::select(year, location, placeholder, percentageChange) # Ensure fields are ordered as desired.
figCap_plotTitle <- "Percentage of Polk, Norman, Mahnomen County\nChildren Ages 24−35 Months for the Seven-Vaccine Series"
figSubcap <- "Data Source: @mdhPHDAPImmuizations"
plotXCaption <- paste("Data Source:",mdhPHDAPImmuizations) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Percentage", "% Change") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "percent", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1",
"toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3",
figCap_plotTitle, plotXCaption, "",minYr, maxYr, scaleYContinuous, gbVal_colorScheme,
gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
figCap_plotTitle <- "Percentage of Polk, Norman, Mahnomen County\nChildren Ages 24−35 Months for the Seven-Vaccine Series"
figSubcap <- "Data Source: @mdhPHDAPImmuizations"
plotXCaption <- paste("Data Source:",mdhPHDAPImmuizations) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous = scales::label_percent()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Percentage", "% Change") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "percent", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1",
"toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3",
figCap_plotTitle, plotXCaption, "",minYr, maxYr, scaleYContinuous, gbVal_colorScheme,
gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
#| label: f_foodShelfHousehold
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_foodShelf |>
dplyr::filter(year >= max(year)-6, measure == "Household") |>   # Select the 6 most recent year spans
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nHousehold Visits: "
, toolTipTextValue3 = scales::label_comma()(rawValue)
)
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
#| label: f_pufAmh
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_puf |>
dplyr::filter(measure == "amh") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nOptimal Care Rate: "
, toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
)
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year == maxYr)  |>
dplyr::arrange(fips, year) |>
dplyr::mutate(placeholder = scales::label_number(accuracy = 0.01)(optimal_care_rate)) |>
dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.
figCap_plotTitle <- "Adolescent Mental Health and/or Depression Screening"
figSubcap <- "Data Source: @mdhPublicUseFiles2022"
plotXCaption <- paste("Data Source:", mdhPublicUseFiles2022) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous =  scales::label_number(accuracy = 0.01)  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Optimal Care Rate") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "optimal_care_rate", "location", "fips", "toolTipTextHeader1",
"toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3",
"toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, scaleYContinuous,
gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
#| label: f_pufAmh
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_puf |>
dplyr::filter(measure == "amh") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nOptimal Care Rate: "
, toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
)
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |>
dplyr::filter(year == maxYr)  |>
dplyr::arrange(fips, year) |>
dplyr::mutate(placeholder = scales::label_number(accuracy = 0.01)(optimal_care_rate)) |>
dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.
figCap_plotTitle <- "Adolescent Mental Health and/or Depression Screening"
figSubcap <- "Data Source: @mdhPublicUseFiles2022"
plotXCaption <- paste("Data Source:", mdhPublicUseFiles2022) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.
# Plot
scaleYContinuous =  scales::label_number(accuracy = 0.01)  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Optimal Care Rate") # Using a list accommodates tables with different column lengths.
#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
filtered_data, "year", "optimal_care_rate", "location", "fips", "toolTipTextHeader1",
"toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3",
"toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, scaleYContinuous,
gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
)
filtered_data <- f_puf |>
dplyr::filter(measure == "amh") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nOptimal Care Rate: "
, toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
)
minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))
filtered_data <- f_puf |>
dplyr::filter(measure == "amh") |>
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nOptimal Care Rate: "
, toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
)
unique(min(filtered_data$year))
unique(min(filtered_data$year))
use warnings()
f_cdcSvi2022 <- f_cdcSvi2022 |>
dplyr::mutate(
area_sqmi = formattable::comma(area_sqmi,2)
, personPerSqMile = formattable::comma(personPerSqMile,1)
, e_pov150 = formattable::comma(e_pov150,0)
, e_hburd = formattable::comma(e_hburd,0)
, e_nohsdp = formattable::comma(e_nohsdp,0)
, e_uninsur = formattable::comma(e_uninsur,0)
, e_age65 = formattable::comma(e_age65,0)
, e_crowd = formattable::comma(e_crowd,0)
) |>
dplyr::arrange(fips)
f_cdcSvi2022 <- if (file.exists("pages/Data/f_cdcSvi2022.csv")) {
read.csv("pages/Data/f_cdcSvi2022.csv")
} else {
f_cdcSvi2022 <- read.csv("./Data/f_cdcSvi2022.csv")
}
f_cdcSvi2022 <- f_cdcSvi2022 |>
dplyr::mutate(
area_sqmi = formattable::comma(area_sqmi,2)
, personPerSqMile = formattable::comma(personPerSqMile,1)
, e_pov150 = formattable::comma(e_pov150,0)
, e_hburd = formattable::comma(e_hburd,0)
, e_nohsdp = formattable::comma(e_nohsdp,0)
, e_uninsur = formattable::comma(e_uninsur,0)
, e_age65 = formattable::comma(e_age65,0)
, e_crowd = formattable::comma(e_crowd,0)
) |>
dplyr::arrange(fips)
#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
source("pages/Global/gb.R")
source("pages/Data/data.R")
} else {
source("./Global/gb.R")
source("./Data/data.R")
}
f_cdcSvi2022 <- f_cdcSvi2022 |>
dplyr::arrange(fips)
dplyr::arrange(area_sqmi)
f_cdcSvi2022SqMile <- f_cdcSvi2022 |>
dplyr::filter(fips != gbVal[2], fips != gbVal[3]) |>
dplyr::arrange(area_sqmi)
f_cdcSvi2022SqMile <- f_cdcSvi2022 |>
dplyr::filter(fips != gbVal[2], fips != gbVal[3]) |>
dplyr::arrange(desc(area_sqmi))
View(f_cdcSvi2022SqMile)
#| label: fig-acsFiveEst2022AgeSex
#| include: false
# include does not show output or code #| is a special syntax for Quarto
df_acsFiveEst2022AgeSex <-
read.csv("https://api.census.gov/data/2022/acs/acs5/subject?get=group(S0101)&ucgid=pseudo(0400000US27$0500000)") |>
janitor::clean_names()  |>
dplyr::mutate(
x_geo_id = as.integer(substr(x_geo_id, nchar(x_geo_id) - 4, nchar(x_geo_id))) # Only pull the last five characters
, name = sub(" County.*","",name) #Extract just the county name so everything before space county is pulled
) |>
dplyr::select(- dplyr::ends_with("ea"), - dplyr::ends_with("ma")) |>
dplyr::select(1:3, s0101_c01_032e,
dplyr::matches("s0101_c03_00[2-9]e|s0101_c03_01[0-9]e"),
dplyr::matches("s0101_c05_00[2-9]e|s0101_c05_01[0-9]e")
) |>
dplyr::rename_with(~ gsub("^[^_]*_c03_", "genderMale", .), dplyr::matches("_c03_")) |>
dplyr::rename_with(~ gsub("^[^_]*_c05_", "genderFemale", .), dplyr::matches("_c05_")) |>
dplyr::rename(
fips = 1
, tot_pop_est = 3
, tot_medianAge_est = 4
, tot_sexMaleLe5_est = 5
, tot_sexMale5To9_est = 6
, tot_sexMale10To14_est = 7
, tot_sexMale15To19_est = 8
, tot_sexMale20To24_est = 9
, tot_sexMale25To29_est = 10
, tot_sexMale30To34_est = 11
, tot_sexMale35To39_est = 12
, tot_sexMale40To44_est = 13
, tot_sexMale45To49_est = 14
, tot_sexMale50To54_est = 15
, tot_sexMale55To59_est = 16
, tot_sexMale60To64_est = 17
, tot_sexMale65To69_est = 18
, tot_sexMale70To74_est = 19
, tot_sexMale75To79_est = 20
, tot_sexMale80To84_est = 21
, tot_sexMale85Plus_est = 22
, tot_sexFemaleLe5_est = 23
, tot_sexFemale5To9_est = 24
, tot_sexFemale10To14_est = 25
, tot_sexFemale15To19_est = 26
, tot_sexFemale20To24_est = 27
, tot_sexFemale25To29_est = 28
, tot_sexFemale30To34_est = 29
, tot_sexFemale35To39_est = 30
, tot_sexFemale40To44_est = 31
, tot_sexFemale45To49_est = 32
, tot_sexFemale50To54_est = 33
, tot_sexFemale55To59_est = 34
, tot_sexFemale60To64_est = 35
, tot_sexFemale65To69_est = 36
, tot_sexFemale70To74_est = 37
, tot_sexFemale75To79_est = 38
, tot_sexFemale80To84_est = 39
, tot_sexFemale85Plus_est = 40
) |>
dplyr::arrange(tot_medianAge_est) #This will arrange counties by median age so the order can be indexed later
# Since median can't technically be recalculated without raw Vals, I pull the state API rather than recalculate the totals by adding up the county data
# This process is different than the decennial population estimate process because median can't be recalculated
# Pulling the state API directly, the median age is 38.5 but the county calculated Val was 38.7.
state_totalRow <-
read.csv("https://api.census.gov/data/2022/acs/acs5/subject?get=group(S0101)&ucgid=0400000US27") |>
janitor::clean_names()  |>
dplyr::select(- dplyr::ends_with("ea"), - dplyr::ends_with("ma")) |>
dplyr::select(1:3, s0101_c01_032e,
dplyr::matches("s0101_c03_00[2-9]e|s0101_c03_01[0-9]e"),
dplyr::matches("s0101_c05_00[2-9]e|s0101_c05_01[0-9]e")
) |>
dplyr::rename_with(~ gsub("^[^_]*_c03_", "sexMale", .), dplyr::matches("_c03_")) |>
dplyr::rename_with(~ gsub("^[^_]*_c05_", "sexFemale", .), dplyr::matches("_c05_")) |>
dplyr::rename(
fips = 1
, tot_pop_est = 3
, tot_medianAge_est = 4
, tot_sexMaleLe5_est = 5
, tot_sexMale5To9_est = 6
, tot_sexMale10To14_est = 7
, tot_sexMale15To19_est = 8
, tot_sexMale20To24_est = 9
, tot_sexMale25To29_est = 10
, tot_sexMale30To34_est = 11
, tot_sexMale35To39_est = 12
, tot_sexMale40To44_est = 13
, tot_sexMale45To49_est = 14
, tot_sexMale50To54_est = 15
, tot_sexMale55To59_est = 16
, tot_sexMale60To64_est = 17
, tot_sexMale65To69_est = 18
, tot_sexMale70To74_est = 19
, tot_sexMale75To79_est = 20
, tot_sexMale80To84_est = 21
, tot_sexMale85Plus_est = 22
, tot_sexFemaleLe5_est = 23
, tot_sexFemale5To9_est = 24
, tot_sexFemale10To14_est = 25
, tot_sexFemale15To19_est = 26
, tot_sexFemale20To24_est = 27
, tot_sexFemale25To29_est = 28
, tot_sexFemale30To34_est = 29
, tot_sexFemale35To39_est = 30
, tot_sexFemale40To44_est = 31
, tot_sexFemale45To49_est = 32
, tot_sexFemale50To54_est = 33
, tot_sexFemale55To59_est = 34
, tot_sexFemale60To64_est = 35
, tot_sexFemale65To69_est = 36
, tot_sexFemale70To74_est = 37
, tot_sexFemale75To79_est = 38
, tot_sexFemale80To84_est = 39
, tot_sexFemale85Plus_est = 40
) |>
dplyr::mutate(
fips = 99
, name = "Minnesota"
)
chb_totalRow <-  df_acsFiveEst2022AgeSex |>
gbFun_countyFilter(fips) |>
dplyr::summarise(
fips = 999 #CHB total will be 99 throughout the report
, name = gbVal_chbAbbrLbl
#Its not perfectly accurate but this is the best I can do to calculate median age without the raw data for combined CHB Its also prior to the tot_pop_est because if the tot_pop_est is before this step it messes up the calculation
, tot_medianAge_est = round(sum(tot_pop_est * tot_medianAge_est, na.rm = TRUE) / sum(tot_pop_est, na.rm = TRUE), 1)
, tot_pop_est = sum(tot_pop_est, na.rm = TRUE)
, tot_sexMaleLe5_est = sum(tot_sexMaleLe5_est, na.rm = TRUE)
, tot_sexMale5To9_est = sum(tot_sexMale5To9_est, na.rm = TRUE)
, tot_sexMale10To14_est = sum(tot_sexMale10To14_est, na.rm = TRUE)
, tot_sexMale15To19_est = sum(tot_sexMale15To19_est, na.rm = TRUE)
, tot_sexMale20To24_est = sum(tot_sexMale20To24_est, na.rm = TRUE)
, tot_sexMale25To29_est = sum(tot_sexMale25To29_est, na.rm = TRUE)
, tot_sexMale30To34_est = sum(tot_sexMale30To34_est, na.rm = TRUE)
, tot_sexMale35To39_est = sum(tot_sexMale35To39_est, na.rm = TRUE)
, tot_sexMale40To44_est = sum(tot_sexMale40To44_est, na.rm = TRUE)
, tot_sexMale45To49_est = sum(tot_sexMale45To49_est, na.rm = TRUE)
, tot_sexMale50To54_est = sum(tot_sexMale50To54_est, na.rm = TRUE)
, tot_sexMale55To59_est = sum(tot_sexMale55To59_est, na.rm = TRUE)
, tot_sexMale60To64_est = sum(tot_sexMale60To64_est, na.rm = TRUE)
, tot_sexMale65To69_est = sum(tot_sexMale65To69_est, na.rm = TRUE)
, tot_sexMale70To74_est = sum(tot_sexMale70To74_est, na.rm = TRUE)
, tot_sexMale75To79_est = sum(tot_sexMale75To79_est, na.rm = TRUE)
, tot_sexMale80To84_est = sum(tot_sexMale80To84_est, na.rm = TRUE)
, tot_sexMale85Plus_est = sum(tot_sexMale85Plus_est , na.rm = TRUE)
, tot_sexFemaleLe5_est = sum(tot_sexFemaleLe5_est, na.rm = TRUE)
, tot_sexFemale5To9_est = sum(tot_sexFemale5To9_est, na.rm = TRUE)
, tot_sexFemale10To14_est = sum(tot_sexFemale10To14_est, na.rm = TRUE)
, tot_sexFemale15To19_est = sum(tot_sexFemale15To19_est, na.rm = TRUE)
, tot_sexFemale20To24_est = sum(tot_sexFemale20To24_est, na.rm = TRUE)
, tot_sexFemale25To29_est = sum(tot_sexFemale25To29_est, na.rm = TRUE)
, tot_sexFemale30To34_est = sum(tot_sexFemale30To34_est, na.rm = TRUE)
, tot_sexFemale35To39_est = sum(tot_sexFemale35To39_est, na.rm = TRUE)
, tot_sexFemale40To44_est = sum(tot_sexFemale40To44_est, na.rm = TRUE)
, tot_sexFemale45To49_est = sum(tot_sexFemale45To49_est, na.rm = TRUE)
, tot_sexFemale50To54_est = sum(tot_sexFemale50To54_est, na.rm = TRUE)
, tot_sexFemale55To59_est = sum(tot_sexFemale55To59_est, na.rm = TRUE)
, tot_sexFemale60To64_est = sum(tot_sexFemale60To64_est, na.rm = TRUE)
, tot_sexFemale65To69_est = sum(tot_sexFemale65To69_est, na.rm = TRUE)
, tot_sexFemale70To74_est = sum(tot_sexFemale70To74_est, na.rm = TRUE)
, tot_sexFemale75To79_est = sum(tot_sexFemale75To79_est, na.rm = TRUE)
, tot_sexFemale80To84_est = sum(tot_sexFemale80To84_est, na.rm = TRUE)
, tot_sexFemale85Plus_est = sum(tot_sexFemale85Plus_est, na.rm = TRUE)
) |>
as.data.frame()
# Union the total row with the individual county data
f_acsFiveEst2022AgeSex <- state_totalRow |>
dplyr::bind_rows(chb_totalRow) |>
dplyr::bind_rows(df_acsFiveEst2022AgeSex) |>
gbFun_countyFilter(fips) #Apply county filter so only counties of interest are returned
rm(df_acsFiveEst2022AgeSex, state_totalRow, chb_totalRow)
View(f_acsFiveEst2022AgeSex)
acsFiveEst2022AgeSexMedianAge <- f_acsFiveEst2022AgeSex |>
dplyr::filter(fips != gbVal[2], fips != gbVal[3]) |>
dplyr::arrange(desc(tot_medianAge))
acsFiveEst2022AgeSexMedianAge <- f_acsFiveEst2022AgeSex |>
dplyr::filter(fips != gbVal[2], fips != gbVal[3])
# Specify the path to your PDF file
pdf_file <- "pages/Attachments/2-kittson_ka-crashes_2019-2023.pdf"
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Loop through each page and save as PNG
for (i in 1:num_pages) {
# Render the page
pdf_image <- pdftools::pdf_render_page(pdf_file, page = i)
# Save the image as PNG
png_filename <- paste0("output_page_", i, ".png")
png::writePNG(pdf_image, target = png_filename)
}
# Specify the path to your PDF file
pdf_file <- "pages/Attachments/2-marshall_ka-crashes_2019-2023.pdf"
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Loop through each page and save as PNG
for (i in 1:num_pages) {
# Render the page
pdf_image <- pdftools::pdf_render_page(pdf_file, page = i)
# Save the image as PNG
png_filename <- paste0("output_page_", i, ".png")
png::writePNG(pdf_image, target = png_filename)
}
# Specify the path to your PDF file
pdf_file <- "pages/Attachments/2-Pennington_ka-crashes_2019-2023.pdf"
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Loop through each page and save as PNG
for (i in 1:num_pages) {
# Render the page
pdf_image <- pdftools::pdf_render_page(pdf_file, page = i)
# Save the image as PNG
png_filename <- paste0("countyPenningtonMap_crashes2019_2023", i, ".png")
png::writePNG(pdf_image, target = png_filename)
}
# Specify the path to your PDF file
pdf_file <- "pages/Attachments/2-red-lake_ka-crashes_2019-2023.pdf"
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Loop through each page and save as PNG
for (i in 1:num_pages) {
# Render the page
pdf_image <- pdftools::pdf_render_page(pdf_file, page = i)
# Save the image as PNG
png_filename <- paste0("countyRedLakeMap_crashes2019_2023", i, ".png")
png::writePNG(pdf_image, target = png_filename)
}
# Specify the path to your PDF file
pdf_file <- "pages/Attachments/2-roseau_ka-crashes_2019-2023.pdf"
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Get the number of pages in the PDF
num_pages <- pdftools::pdf_info(pdf_file)$pages
# Loop through each page and save as PNG
for (i in 1:num_pages) {
# Render the page
pdf_image <- pdftools::pdf_render_page(pdf_file, page = i)
# Save the image as PNG
png_filename <- paste0("countyRoseauMap_crashes2019_2023", i, ".png")
png::writePNG(pdf_image, target = png_filename)
}
#| label: f_foodShelfHousehold
#| warning: false
#| include: false
# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice
filtered_data <- f_foodShelf |>
dplyr::filter(year >= max(year)-6, measure == "Household") |>   # Select the 6 most recent year spans
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nHousehold Visits: "
, toolTipTextValue3 = scales::label_comma()(rawValue)
)
f_neonatalAbstinenceSyndrome2016_2022 <- if (file.exists("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")) {
read.csv("pages/Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
} else {
read.csv("./Data/f_neonatalAbstinenceSyndrome2016_2022.csv")
}
f_mdhNonFatalDrugOverdose <- if (file.exists("pages/Data/f_mdhNonFatalDrugOverdose.csv")) {
read.csv("pages/Data/f_mdhNonFatalDrugOverdose.csv")
} else {
read.csv("./Data/f_mdhNonFatalDrugOverdose.csv")
}
filtered_data <- f_mdhNonFatalDrugOverdose |>
dplyr::arrange(desc(year)) |>
dplyr::filter(year >= max(year)-6) |>   # Select the 6 most recent year spans
dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
toolTipTextHeader1 = "Year: "
, toolTipTextValue1 = year
, toolTipTextHeader2 = "\nLocation: "
, toolTipTextValue2 = location
, toolTipTextHeader3 = "\nAge-Adjusted Rate per 1,000: "
, toolTipTextValue3 = scales::label_comma(accuracy = 0.01)(age_adjustedRatePer1000)
)
View(filtered_data)
View(f_mdhNonFatalDrugOverdose)
read.csv("https://www.health.state.mn.us/data/mchs/vitalstats/docs/natality2020-annualsummarybirthdata.csv")
df_ <- read.csv("https://www.health.state.mn.us/data/mchs/vitalstats/docs/natality2020-annualsummarybirthdata.csv")
View(df_)
