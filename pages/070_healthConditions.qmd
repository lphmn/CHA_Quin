# Health Conditions

```{r}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto 

#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
  source("pages/Global/gb.R")
  source("pages/Data/data.R")
} else {
  source("./Global/gb.R")
  source("./Data/data.R")
}
```

Addressing chronic health conditions is vital for community well-being. Heart disease, cancer, STIs (including HIV), obesity, and diabetes are major health challenges, impacting individuals and burdening healthcare systems. Heart disease and cancer are the leading causes of death in Minnesota, highlighting the need for early detection and treatment. Obesity contributes to diabetes and heart disease, while effective management of diabetes is crucial to prevent complications. Focusing on these conditions can lead to targeted interventions and improved health outcomes, enhancing community quality of life.

## Heart Disease

Heart disease is a critical health concern affecting communities, with significant variations in age-adjusted death rates per 100,000 residents from 2019 to 2023. Roseau County stands out with the highest rate at 175 deaths per 100,000 residents, far exceeding the Minnesota state average of 121. Pennington County also surpasses the state average, highlighting a pressing issue. Although Kittson, Marshall, and Red Lake counties are not statistically higher, their age-adjusted prevalence rates still exceed the state average, underscoring the widespread impact of heart disease in these areas.

|  Location  | Heart Disease | Confidence Interval |
|:----------:|:-------------:|:-------------------:|
| Minnesota  |      120      |       119-121       |
|  Kittson   |      138      |       102-173       |
|  Marshall  |      137      |       110-163       |
| Pennington |      158      |       134-182       |
|  Red Lake  |      144      |       103-185       |
|   Roseau   |      175      |       150-200       |

: Age Adjusted Number of Deaths per 100,000 due to Heart Disease (2019-2023)

@mdhHeartDisease

## Cancer

Cancer remains a significant public health challenge, affecting many individuals and communities. As of January 1, 2021, 316,110 Minnesota residents (5.5% of the population) were living with a history of malignant cancer. Quin counties have even higher prevalence rates: Kittson (7.4%), Marshall (7.9%), Pennington (6.0%), Red Lake (7.4%), and Roseau (5.6%). These statistics underscore the widespread impact of cancer and the critical need for ongoing support and resources. Additionally, specific cancers like lung and breast cancer further illustrate this burden, with Kittson County having the highest lung cancer rate at 68.3 per 100,000 people, and Roseau County having the highest breast cancer rate at 144.3 per 100,000 people. Addressing these challenges requires targeted interventions and continuous support for those affected.

+---------------+-----------------------------+------------------------------+
| Location      | Number of Persons Living    | Percent of Population Living |
|               |                             |                              |
|               | with a History of of Cancer | with a History of Cancer     |
+:=============:+:===========================:+:============================:+
| Minnesota     | 3,16,110                    | 5.5%                         |
+---------------+-----------------------------+------------------------------+
| Kittson       | 310                         | 7.4%                         |
+---------------+-----------------------------+------------------------------+
| Marshall      | 710                         | 7.9%                         |
+---------------+-----------------------------+------------------------------+
| Pennington    | 830                         | 6.0%                         |
+---------------+-----------------------------+------------------------------+
| Red Lake      | 290                         | 7.4%                         |
+---------------+-----------------------------+------------------------------+
| Roseau        | 860                         | 5.6%                         |
+---------------+-----------------------------+------------------------------+

: Persons living with a history of of cancer by Location

@mdhCancerPrevalence

|  Location  | Lung Cancer | Breast Cancer |
|:----------:|:-----------:|:-------------:|
| Minnesota  |    55.6     |     135.7     |
|  Kittson   |    68.3     |     120.9     |
|  Marshall  |    66.8     |     133.7     |
| Pennington |    58.1     |     137.3     |
|  Red Lake  |    53.3     |     141.6     |
|   Roseau   |    58.8     |     144.3     |

: Cancer Age Adjusted Rate per 100,000 people 2015-2019

@mdhCancerMap

## Dementia

Dementia is a growing concern, especially among older adults. In Minnesota, 11.9% of Medicare beneficiaries have dementia. This rate is slightly lower in Kittson (10.0%), Marshall (10.2%), and Pennington (10.3%) counties, with even lower rates in Red Lake (9.5%) and Roseau (7.6%) counties. While these rates are lower than the state average, they still pose a concern due to potential limited access to resources in these areas. Early detection, effective management, and community resources are crucial for support and reducing the burden of dementia.

|  Location  | Percent of Beneficiaries with Dementia |
|:----------:|:--------------------------------------:|
| Minnesota  |                 11.9%                  |
|  Kittson   |                 10.0%                  |
|  Marshall  |                 10.2%                  |
| Pennington |                 10.3%                  |
|  Red Lake  |                  9.5%                  |
|   Roseau   |                  7.6%                  |

: Prevalence of Dementia

@norcDementia

## Diabetes

The age-adjusted prevalence of diabetes is similar between Minnesota and the five Quin counties. However, Kittson, Marshall, Red Lake, and Roseau counties have lower rates of optimal diabetic care compared to the state. Optimal care includes controlling blood pressure, maintaining HbA1c levels, taking statins if tolerated, avoiding tobacco, and using daily aspirin for those with ischemic vascular disease [@mdhPublicUseFiles2022]. This care is intended for patients aged 18-75. While the prevalence of a disease like diabetes cannot be fully-controlled and the reasons for lower optimal care rates in these counties remain unclear, improving community outreach programs could promote better prevention and care outcomes, which can be influenced by local efforts.

::: {#fig-conditionDiabetes}
```{r}
#| label: f_places2022Diabetes
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "DIABETES") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-pufOdc}
```{r}
#| label: f_pufOdc
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_puf |> 
  dplyr::filter(measure == "odc") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nOptimal Care Rate: "
    , toolTipTextValue3 =  scales::label_number(accuracy = 0.01)(optimal_care_rate)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_number(accuracy = 0.01)(optimal_care_rate)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Optimal Diabetic Care " 
figSubcap <- "Data Source: @mdhPublicUseFiles2022"
plotXCaption <- paste("Data Source:", mdhPublicUseFiles2022) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous =  scales::label_number(accuracy = 0.01)  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Optimal Care Rate") # Using a list accommodates tables with different column lengths.


#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "optimal_care_rate", "location", "fips", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3",
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Obesity

Examining obesity is crucial due to its link to chronic diseases like heart disease, diabetes, and certain cancers. While Minnesota and the five Quin counties have statistically similar obesity rates, Kittson and Marshall counties' higher prevalence rates indicate a possible need for targeted interventions, and Pennington County's lower prevalence rate suggests effective strategies that should continue.

::: {#fig-conditionObesity}
```{r}
#| label: f_places2022Obesity
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "OBESITY") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Influenza

Minnesota uses several influenza surveillance methods, summarizing data by influenza season (October -- April), rather than calendar year. Please refer to page 2 Hospital Influenza Cases by Season and page 4 Deaths associated with influenza by season [in this MDH Summery report](https://www.health.mn.gov/diseases/flu/stats/2022summary.pdf).

## STI/HIV

Addressing behavioral factors is crucial, but it's equally important to focus on STIs and HIV, which require effective prevention, testing, and treatment strategies. Chlamydia, Gonorrhea, and Syphilis data in this report should be compared within the same county for the same year since the data values are counts and do not factor in population change. In 2023, Kittson reported 7 Chlamydia cases, Marshall 18, Pennington 31, Red Lake 6, and Roseau 17. Gonorrhea cases were minimal, with Kittson, Marshall, and Red Lake reporting zero cases, Pennington 6, and Roseau 2. Syphilis cases were also low, with Kittson reporting zero, Marshall 1, Pennington 2, Red Lake 2, and Roseau zero. These counts must be interpreted carefully, but low counts provide knowledge that community efforts are being effective. While individuals can contract HIV/AIDS through various means, the low counts in the five Quin counties also point to effective community efforts in education about safe sex and prevention.

::: {#fig-chlamydia}
```{r}
#| label: f_stiHIVChlamydia
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Chlamydia New & Old Cases", fips != 27000) |>  #New & Old Cases data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nChlamydia Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(ctValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(ctValue)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Chlamydia Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Chlamydia Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "ctValue", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-gonorrhea}
```{r}
#| label: f_stiHIVGonorrhea
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Gonorrhea New & Old Cases", fips != 27000) |>  #New & Old Cases data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nGonorrhea Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(ctValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(ctValue)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Gonorrhea Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Gonorrhea Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "ctValue", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-syphilis}
```{r}
#| label: f_stiHIVSyphilis
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "Syphilis New & Old Cases", fips != 27000) |>  #New & Old Cases data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nSyphilis Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(ctValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(ctValue)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "Syphilis Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "Syphilis Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "ctValue", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-HIVAidsPrevalence}
```{r}
#| label: f_stiHIVHivAidsPrevalence
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_stiHIV |> 
  dplyr::filter(indicator == "HIV & Aids New & Old Cases", fips != 27000) |>  #New & Old Cases data gets overwhelmed by state |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nHIV & Aids Cases: "
    , toolTipTextValue3 = scales::label_comma(accuracy = .01)(ctValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma(accuracy = .01)(ctValue)) |>   
  dplyr::select(year, location, placeholder) # Ensure fields are ordered as desired.  


figCap_plotTitle <- "HIV & Aids Cases"
figSubcap <- "Data Source: @mdhStiStatistics"
plotXCaption <- paste("Data Source:", mdhStiStatistics) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()  # Format y-axis values with geography
#Table
colList <- list("Year", "Location", "HIV & Aids Cases Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "ctValue", "location", "fips", "toolTipTextHeader1", "toolTipTextValue1", 
    "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", "toolTipTextValue3", figCap_plotTitle,
    plotXCaption, "", minYr, maxYr, scaleYContinuous,
    gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Asthma

Asthma is a chronic disease that causes inflammation and narrowing of the airways, making breathing difficult. During an asthma attack, the airway lining swells, muscles tighten, and thick mucus clogs the airways. Asthma can affect people of all ages but often starts in childhood. With people spending up to 90% of their time indoors, the home environment is crucial for reducing asthma triggers. Common indoor triggers include pet dander, mold, pests, scented cleaning products, and secondhand smoke [@mdhAsthma]. All Quin counties had a lower age-adjusted asthma emergency visit prevalence per 10,000 residents for 2019-2021 compared to Minnesota, with Roseau County being the closest at 26.7.

| Location   | Age-Adjusted |
|------------|--------------|
| Minnesota  | 29.8         |
| Kittson    | 8.2\*        |
| Marshall   | 23.4         |
| Pennington | 18.4         |
| Red Lake   | 21.7         |
| Roseau     | 26.7         |

: Asthma ED Visit Age-Adjusted Rates for 2019-2021 by County (per 10,000 Residents)

-   Unstable Rate Data Source: @mdhPHDAPAsthma
