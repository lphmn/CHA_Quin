# Health Behaviors

```{r}
#| label: gb
#| include: false
# include does not show output or code #| is a special syntax for Quarto 

#When testing and not rendering the report, the if statement returns true but when rendering as the report, the else executes
if (file.exists("pages/Global/gb.R")) {
  source("pages/Global/gb.R")
  source("pages/Data/data.R")
} else {
  source("./Global/gb.R")
  source("./Data/data.R")
}
```

Behavioral factors significantly impact community health and well-being. Key factors include:

-   Binge Drinking Among Adults: Leads to liver disease, cardiovascular issues, and increased accident risks. Understanding its prevalence helps address public health impacts.

-   Percentage of Mothers Who Smoke: Smoking during pregnancy risks low birth weight, preterm birth, and developmental issues. Monitoring rates promotes healthier pregnancies.

-   Current Cigarette Smoking Among Adults: A leading cause of preventable diseases and deaths. Examining rates helps target interventions to reduce smoking-related health problems.

-   STI/HIV: Prevalence is a critical concern. Effective prevention, testing, and treatment strategies are essential to control spread and improve health.

Analyzing these factors provides insights into community health challenges and helps develop strategies to promote healthier behaviors and improve outcomes.

## Breastfeeding

The Special Supplemental Nutrition Program for Women, Infants & Children (WIC) program provides essential nutritional and breastfeeding support, including education, counseling, healthy foods, and referrals to health and social services, for eligible pregnant women, new mothers, infants, and young children. Breastmilk is incredibly beneficial for infants as it provides essential nutrients, boosts immunity, and fosters healthy development, but breastfeeding can be challenging for mothers due to factors like physical discomfort, time constraints, and lack of support. Although WIC mothers in Quin's five counties for 2023 initially have a high rate of breastfeeding initiation at 77.00%, their participation starts to decline over time, with only 55.10% breastfeeding at 2 months and 48.90% at 3 months. This decline mirrors breastfeeding patterns observed before, during, and after COVID-19.

::: {#fig-preventionRoutineCheckup}
```{r}
#| label: f_wicBreastFeedingRoutineCheckup
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_wicBreastFeeding |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, measure != "# infants") |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nDuration: "
    , toolTipTextValue2 = measure
    , toolTipTextHeader3 = "\nPercentage: "
    , toolTipTextValue3 = scales::label_percent(accuracy = 0.01)(measureValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year == maxYr)  |>
  dplyr::arrange(measureOrder) |>
  dplyr::mutate(placeholder = ifelse(is.na(measureValue), "--", scales::label_percent(accuracy = 0.01)(measureValue))) |>   
  dplyr::select(year, measure, placeholder) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Quin Breastfeeding Initiation and Duration\nAmong Infants in the Minnesota WIC Program"
figSubcap <- "Data Source: @mdhWomenInfantChildren"
plotXCaption <- paste("Data Source:",mdhWomenInfantChildren) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()
#Table 
colList <- list("Year", "Duration", "Percentage") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "measureValue", "measure", "measureOrder", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 6
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Substance Use and Misuse

Exploring the critical issues of neonatal abstinence syndrome (NAS), nonfatal drug overdoses, and fatal drug overdoses reveals the urgent need to tackle substance abuse disorders and addictions, highlighting their profound impact on public health and the lives of countless individuals.

Among the five Quin counties, the neonatal abstinence syndrome (NAS) rates are unstable (value under 16). However, this instability over five years reflects the positive impact of our community's efforts to prevent NAS and educate about the effects of substance use on newborns.

Comparing fatal drug overdose data across counties is challenging due to raw counts and low numbers. The community should consider the profound impact each loss has on its members. Over seven years, Minnesota lost 8,991 individuals to drug overdoses, including 33 from the five Quin counties. These numbers highlight the importance of continued efforts to promote positive change in our communities.

::: {#fig-mdhNAS}
```{r}
#| label: f_neonatalAbstinenceSyndrome2016_2022
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_neonatalAbstinenceSyndrome2016_2022 |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, fips != 99) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nCount: "
    , toolTipTextValue3 = scales::label_comma()(valueCount)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- f_neonatalAbstinenceSyndrome2016_2022 |> 
  dplyr::filter(year == 1)  |>
  dplyr::arrange(fips) |>
  dplyr::mutate(placeholderCount = scales::label_comma()(valueCount)
                , placeholderRate = scales::label_comma(accuracy = 0.01)(rate2016_2022)) |>   
  dplyr::select(location, placeholderCount, placeholderRate) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Neonatal Abstinence Syndrome (NAS)"
figSubcap <- "Data Source: @mdhNeonatalAbstinenceSyndrome"
plotXCaption <- paste("Data Source:",mdhNeonatalAbstinenceSyndrome) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Location", "NAS Total 2016-2022", "NAS Rate 2016-2022") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueCount", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-mdhNonfatalDrug}
```{r}
#| label: f_mdhNonFatalDrugOverdose
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_mdhNonFatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nAge-Adjusted Rate per 1,000: "
    , toolTipTextValue3 = scales::label_comma(accuracy = 0.01)(age_adjustedRatePer1000)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr - 1)  |>
  dplyr::arrange(fips) |>
  dplyr::mutate(placeholderCount = scales::label_comma()(valueCount)
                , placeholderRate = scales::label_comma(accuracy = 0.01)(age_adjustedRatePer1000)) |>   
  dplyr::select(year, location, placeholderCount, placeholderRate) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Nonfatal Drug Overdose Age−Adjusted Rate (per 1,000 Residents)"
figSubcap <- "Data Source: @mdhNonFatalDrugOverdose"
plotXCaption <- paste("Data Source:",mdhNonFatalDrugOverdose) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Year", "Location", "Count", "Age-Adjusted Rate") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "age_adjustedRatePer1000", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-mdhFatalDrug}
```{r}
#| label: f_fatalDrugOverdose
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_fatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6, fips != 27000) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nCount: "
    , toolTipTextValue3 = scales::label_comma()(valueCount)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- f_fatalDrugOverdose |> 
  dplyr::arrange(desc(year)) |>
  dplyr::filter(year >= max(year)-6) |> 
  dplyr::arrange(fips) |>
  dplyr::group_by(fips) |> 
  dplyr::mutate(totalCount = scales::label_comma()(sum(valueCount)), timeRange = paste0(minYr, "-", maxYr)) |>
  dplyr::ungroup() |> 
  dplyr::select(timeRange, location, totalCount) |> # Ensure fields are ordered as desired.
  dplyr::distinct()  

figCap_plotTitle <- "Number of Fatal Drug Overdoses by County of Residence"
figSubcap <- "Data Source: @mdhFatalDrugOverdose"
plotXCaption <- paste("Data Source:",mdhFatalDrugOverdose) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Time Range", "Location", "Total Count") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "valueCount", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )

```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Alcohol

The five Quin counties and Minnesota have a similar rate of binge drinking with about 1 in 5 people doing it. This behavior can cause health problems like alcohol poisoning, injuries, and diseases. It also leads to risky behaviors like unsafe sex and impaired driving, endangering people and communities.

::: {#fig-riskFactorBingeDrinking}
```{r}
#| label: f_places2022Binge
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "BINGE") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Smoking

Smoking remains a critical public health issue for local communities, affecting overall health and well-being. Although much of the data for the five Quin counties is suppressed, available data shows that the percentage of Quin mothers who smoked during pregnancy was higher than the state average. Recently, Roseau County reported a higher percentage of mothers who smoke compared to Minnesota. While the prevalence of mothers who smoked during pregnancy in the Quin counties was higher than the state average, the estimated prevalence of adult cigarette smokers is similar to Minnesota's average, based on overlapping 95% confidence intervals.

::: {#fig-kidsCountPctMomsSmoke}
```{r}
#| label: f_kidsCountMotherSmoke
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_kidsCountMotherSmoke |> 
  dplyr::filter(year >= max(year)-6) |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nPercentage: "
    , toolTipTextValue3 = scales::label_percent(accuracy = 0.01)(dataValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-1)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_percent(accuracy = .01)(dataValue)) |>   
  dplyr::group_by(fips) |>
  dplyr::mutate(percentageChange = dplyr::case_when(
      year == maxYr ~ scales::label_percent(accuracy = .01)((dataValue) - dplyr::first(dataValue)) #Since there is only 2, most recent - next
      , TRUE ~ ""
    )
    , percentageChange = ifelse(is.na(percentageChange), "--", percentageChange)
  ) |>
  dplyr::ungroup() |>
  dplyr::select(year, location, placeholder, percentageChange) # Ensure fields are ordered as desired.  


figCap_plotTitle <- " Percentage of Mothers Who Smoked During Pregnancy"
figSubcap <- "Data Source: @kidsCountMothersWhoSmoked"
plotXCaption <- paste("Data Source:",kidsCountMothersWhoSmoked) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_percent()
#Table 
colList <- list("Year", "Location", "Mothers Who Smoked", "% Change") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "dataValue", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

::: {#fig-riskFactorSmoking}
```{r}
#| label: f_places2022CSmoking
#| warning: false
#| include: false

# Filter the data by 'measureid'
filtered_data <- f_places2022 |> 
  dplyr::filter(measureid == "CSMOKING") |> 
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "\nLocation: "
    , toolTipTextValue1 = locationname
    , toolTipTextHeader2 = "\nPrevalence: "
    , toolTipTextValue2 = paste0(formattable::comma(data_value,0), " (", formattable::comma(low_confidence_limit,0), "-", formattable::comma(high_confidence_limit,0), ")")
  )

filtered_dataTbl <- filtered_data |> 
    dplyr::arrange(locationid, year) |> 
    dplyr::mutate(prevalenceType = ifelse(datavaluetypeid == "CrdPrv", "Crude", "Age-Adjusted"),
                  tab = ifelse(datavaluetypeid == "CrdPrv", "Crude Prevalence", "Age-Adjusted Prevalence")) |> 
    dplyr::select(prevalenceType, locationname, low_confidence_limit, data_value, high_confidence_limit, tab)
  
figCap_plotTitle <- paste(filtered_data$measure[1], filtered_data$brfssYr[1])
figSubcap <- "Data Source: @cdc2024Places"
plotXCaption <- paste("Data Source:",cdc2024Places) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.


#Table 
colList <- list("Type", "Location", "Low CI", "Prevalence", "High CI") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotSingleYrPDF(filtered_data, "locationname", "locationid","data_value", "toolTipTextHeader1", 
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "data_value_type",
    "low_confidence_limit", "high_confidence_limit", figCap_plotTitle, plotXCaption, "Prevalence",
    gbVal_colorScheme, ifelse(knitr::is_html_output(), 10, 12)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5 

if (knitr::is_html_output()) {
# Create the ggplot plot ggplot and then its wrapped within plotly function
gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
#| results: asis
if (knitr::is_html_output()) {
  
  split_data <- split(filtered_dataTbl, filtered_dataTbl$tab)
  
# Generate tabset panels
  cat("::: {.panel-tabset}\n")
     for (tab in names(split_data)) {
       cat(sprintf("## %s\n\n", tab))
       
       # Remove the 'tab' column from the current subset of data
       current_data <- split_data[[tab]][, !names(split_data[[tab]]) %in% "tab"]
       
       print(htmltools::tagList(gbFun_tableHTML(current_data, colList, figCap_plotTitle)))
     }
  cat(":::\n")

}
```
:::

::: {.content-visible when-format="pdf" layout="[[1],[1, 1]]"}
```{r}
#| fig-width: 11
#| fig-height: 3
#| warning: false

if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Crude") |> dplyr::select(-tab), colList)
}
```

```{r}
#| tbl-width: 4
#| tbl-height: 3
#| warning: false
if (!knitr::is_html_output()) {
  gbFun_tablePDF(filtered_dataTbl |> dplyr::filter(prevalenceType == "Age-Adjusted") |> dplyr::select(-tab), colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Food Shelf Household Visits

In 2022, food shelf visits in Kittson, Marshall, Pennington, Red Lake, and Roseau counties reflected a need for food assistance. The most notable increases were in Pennington County (87.89%) and Red Lake County (77.65%), suggesting that economic challenges and food insecurity have intensified in these areas. Kittson County also saw a substantial rise in household visits, with an increase of 50.33%. Roseau County experienced a 17.59% increase, while Marshall County had a smaller but still notable rise of 5.54%. This trend underscores the importance of continued support and resources to address food insecurity in these communities and aligns with the broader state data, which saw a record high of 5.5 million food shelf visits in Minnesota, driven by rising food prices and increased demand from seniors, adults, and children [@hungerSolutionsFoodShelf2022].

::: {#fig-foodShelfHousehold}
```{r}
#| label: f_foodShelfHousehold
#| warning: false
#| include: false

# Data Wrangling so it can just be referenced in the PDF and HTML output instead of writing it twice

filtered_data <- f_foodShelf |> 
  dplyr::filter(year >= max(year)-6, measure == "Household") |>   # Select the 6 most recent year spans
  dplyr::mutate(#Passed into ggplot (PDF Plot) but displayed in plotly (HMTL Plot)
    toolTipTextHeader1 = "Year: "
    , toolTipTextValue1 = year
    , toolTipTextHeader2 = "\nLocation: "
    , toolTipTextValue2 = location
    , toolTipTextHeader3 = "\nHousehold Visits: "
    , toolTipTextValue3 = scales::label_comma()(rawValue)
  )

minYr <- unique(min(filtered_data$year))
maxYr <- unique(max(filtered_data$year))

# Filtering data here handles table variations better and is easier to maintain than filtering in the function.
filtered_dataTbl <- filtered_data |> 
  dplyr::filter(year >= maxYr-1)  |>
  dplyr::arrange(fips, year) |>
  dplyr::mutate(placeholder = scales::label_comma()(rawValue)) |>   
  dplyr::group_by(fips) |>  
  dplyr::mutate(percentageDifference = dplyr::case_when(
      year == maxYr ~ (dplyr::last(rawValue) - dplyr::first(rawValue)) / dplyr::first(rawValue)
      , TRUE ~ NA_real_
    )
    , percentageDifference = ifelse(is.na(percentageDifference), "--", scales::label_percent(accuracy = .01)(percentageDifference))
  ) |>   
  dplyr::ungroup() |>
  dplyr::select(year, location, placeholder, percentageDifference) # Ensure fields are ordered as desired.

figCap_plotTitle <- "Food Shelf Household Visits"
figSubcap <- "Data Source: @hungerSolutionsFoodShelfDataRequest"
plotXCaption <- paste("Data Source:",hungerSolutionsFoodShelfDataRequest) #Since the x axis is passed into plotly, I am defining the x axis for the plot with the data source so when/if people use the plot in their work the data source is referenced ggplot does a a caption argument but it does not pass into plotly. If the caption should be after the legend, then ggplot caption can be used for the pdf version and annotation can be used in plotly, I'll just have to pass an extra argument into the plotly function.

# Plot
scaleYContinuous = scales::label_comma()
#Table 
colList <- list("Year", "Location", "Household Visits", "% Difference") # Using a list accommodates tables with different column lengths.

#Define the plot here so it is only wrote once
p <- gbFun_plotTrendPDF(
    filtered_data, "year", "rawValue", "location", "fips", "toolTipTextHeader1",
    "toolTipTextValue1", "toolTipTextHeader2", "toolTipTextValue2", "toolTipTextHeader3", 
    "toolTipTextValue3", figCap_plotTitle, plotXCaption, "", minYr, maxYr, 
    scaleYContinuous, gbVal_colorScheme, gbVal_shapeScheme, ifelse(knitr::is_html_output(), 10, 14)
    )
```

<div>

::: {.content-visible when-format="html"}
```{r}
#| fig-width: 8
#| fig-height: 5
#| warning: false
if (knitr::is_html_output()) {
  # Create the ggplot plot ggplot and then its wrapped within plotly function
  gbFun_plotHTML(p, figCap_plotTitle)
}
```

```{r}
#| tbl-width: 8
#| tbl-height: 4
#| warning: false
if (knitr::is_html_output()) {
  gbFun_tableHTML(filtered_dataTbl, colList, figCap_plotTitle)
}
```
:::

::: {.content-visible when-format="pdf" layout="[[1, 1], [1]]"}
```{r}
#| warning: false
#| fig-width: 9
#| fig-height: 5
if (!knitr::is_html_output()) {
# Plots have to be printed
print(p)
}

```

```{r}
#| warning: false
#| tbl-width: 2
#| tbl-height: 5
if (!knitr::is_html_output()) {
#Tables shouldn't be printed because the HTML table will display
gbFun_tablePDF(filtered_dataTbl, colList)
}
```
:::

`{r} figSubcap`

</div>

`{r} figCap_plotTitle`
:::

## Farmer's Markets

Farmers markets offer programs like Market Bucks and the WIC Farmers Market Nutrition Program to make fresh produce accessible and support healthy eating. Local initiatives like the Power of Produce (PoP) program encourage children and seniors to engage with farmers markets, promoting lifelong healthy habits. These efforts benefit individual health, community ties, and local economies.

[![](Attachments/060_healthBehaviors/wicDollars.png){fig-align="center" width="338"}](https://www.health.state.mn.us/docs/people/wic/localagency/reports/pptndemo/wicdollars.pdf)
